# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Rewrite files generated by sphinx-apidoc to include inherited members.

This is for files which define a configuration object that
inherits from non-public classes.
"""

import os


_CURR_DIR = os.path.dirname(__file__)
DOCS_DIR = os.path.abspath(os.path.join(_CURR_DIR, '..', 'docs'))
FILES = (
    'ci_diff_helper.appveyor.rst',
    'ci_diff_helper.travis.rst',
)
API_DOC_TEMPLATE = """\
{mod_name} module
{title_bar}

.. automodule:: {mod_name}
    :members:{edits}
    :undoc-members:
    :show-inheritance:
"""


def add_inherited(filename):
    """Adds inherited members to RST content.

    :type filename: str
    :param filename: The RST file (as a relative path) to modify.

    :raises ValueError: if the file contains are not as expected.
    """
    mod_name, _ = os.path.splitext(filename)
    title_bar = '=' * len(mod_name + ' module')

    full_path = os.path.join(DOCS_DIR, filename)
    with open(full_path, 'r') as file_obj:
        contents = file_obj.read()

    # If our edits have already been made, do nothing.
    edited_contents = API_DOC_TEMPLATE.format(
        mod_name=mod_name, title_bar=title_bar,
        edits='\n    :inherited-members:')
    if contents == edited_contents:
        return

    # In this case, we need to write the edits and make sure
    # we're starting from the base case.
    expected = API_DOC_TEMPLATE.format(
        mod_name=mod_name, title_bar=title_bar, edits='')
    if contents != expected:
        raise ValueError('Unexpected file contents.',
                         'Expected', expected,
                         'Actual', contents)

    with open(full_path, 'w') as file_obj:
        file_obj.write(edited_contents)


def main():
    """Rewrite each file to include inherited members."""
    for filename in FILES:
        add_inherited(filename)


if __name__ == '__main__':
    main()
